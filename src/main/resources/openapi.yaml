openapi: 3.0.3
info:
  title: Books Manager (Technical Challenge Ximple)
  description: Books Manager (Technical Challenge Ximple) generated by OpenAPI Generator and Spring Boot
  version: 1.0.0
  license:
    name: MIT
  contact:
    email: alfhernandez@baufest.com
servers:
  - url: http://localhost:8080/bookmanager/api
paths:
  /books:
    get:
      summary: List all the books
      operationId: listBookss
      tags:
        - books
      responses:
        "200":
          description: A list of books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Create a new book
      operationId: createBooks
      tags:
        - books
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Book"
      responses:
        "201":
          description: Book Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /books/{bookId}:
    get:
      summary: Info for a specific pet
      operationId: showBookById
      parameters:
        - name: bookId
          in: path
          description: The book id
          required: true
          schema:
            type: integer
      tags:
        - books
      responses:
        "200":
          description: The required book
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: Delete all books
      operationId: deleteBooks
      parameters:
        - name: bookId
          in: path
          description: The book id that needs to be deleted
          required: true
          schema:
            type: integer
      tags:
        - books
      responses:
        "204":
          description: The resource was deleted successfully
        "400":
          description: Invalid book id supplied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: The book was not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users:
    post:
      summary: Endpoint to authenticate the user and retrieve JWT
      operationId: authUser
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                user:
                  type: string
                  example: "admin"
                password:
                  type: string
                  example: "1234"
              required:
                - user
                - password
      responses:
        200:
          description: Authentication sucessfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserAuth"
        401:
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  schemas:
    Book:
      type: object
      required:
        - title
        - author
        - isbn
        - quantity
      properties:
        id:
          type: integer
          example: 10
        title:
          type: string
          example: The Lord of the Rings
        author:
          type: string
          example: J.R.R Tolkien
        isbn:
          type: string
          example: 978-0-395-19395-8
        quantity:
          type: string
          example: 1
    UserAuth:
       type: object
       properties:
         username:
           type: string
           example: "admin"
         token:
           type: string
           example: "=123312zxc1"
    Error:
      type: object
      required:
        - code
      properties:
        error_code:
          type: string
          example: "ERR-01"
          format: int32
        error_description:
          type: string
          example: "This is an error message example"
        timestamp:
          type: string
          example: "2024-01-24T20:00:50.283+00:00"
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
