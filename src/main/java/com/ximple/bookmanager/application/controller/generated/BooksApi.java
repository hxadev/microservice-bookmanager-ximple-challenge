/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.ximple.bookmanager.application.controller.generated;

import com.ximple.bookmanager.application.dto.generated.Book;
import com.ximple.bookmanager.application.dto.generated.Error;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-24T17:58:21.952677-06:00[America/Mexico_City]")
@Validated
@Controller
@Tag(name = "books", description = "the books API")
public interface BooksApi {

    default BooksApiDelegate getDelegate() {
        return new BooksApiDelegate() {};
    }

    /**
     * POST /books : Create a new book
     *
     * @param book  (required)
     * @return Book Created (status code 201)
     *         or Invalid request (status code 400)
     *         or Unauthorized (status code 401)
     *         or 500 Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "createBooks",
        summary = "Create a new book",
        tags = { "books" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Book Created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Book.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "500", description = "500 Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/books",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Book> createBooks(
        @Parameter(name = "Book", description = "", required = true) @Valid @RequestBody Book book
    ) {
        return getDelegate().createBooks(book);
    }


    /**
     * DELETE /books/{bookId} : Delete all books
     *
     * @param bookId The book id that needs to be deleted (required)
     * @return The resource was deleted successfully (status code 204)
     *         or Invalid book id supplied (status code 400)
     *         or Unauthorized (status code 401)
     *         or The book was not found (status code 404)
     */
    @Operation(
        operationId = "deleteBooks",
        summary = "Delete all books",
        tags = { "books" },
        responses = {
            @ApiResponse(responseCode = "204", description = "The resource was deleted successfully"),
            @ApiResponse(responseCode = "400", description = "Invalid book id supplied", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "The book was not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/books/{bookId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> deleteBooks(
        @Parameter(name = "bookId", description = "The book id that needs to be deleted", required = true, in = ParameterIn.PATH) @PathVariable("bookId") Integer bookId
    ) {
        return getDelegate().deleteBooks(bookId);
    }


    /**
     * GET /books : List all the books
     *
     * @return A list of books (status code 200)
     *         or Invalid request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Resource not found (status code 404)
     *         or 500 Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "listBookss",
        summary = "List all the books",
        tags = { "books" },
        responses = {
            @ApiResponse(responseCode = "200", description = "A list of books", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Book.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "500", description = "500 Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/books",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Book>> listBookss(
        
    ) {
        return getDelegate().listBookss();
    }


    /**
     * GET /books/{bookId} : Info for a specific pet
     *
     * @param bookId The book id (required)
     * @return The required book (status code 200)
     *         or Invalid request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Resource not found (status code 404)
     *         or 500 Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "showBookById",
        summary = "Info for a specific pet",
        tags = { "books" },
        responses = {
            @ApiResponse(responseCode = "200", description = "The required book", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Book.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "500", description = "500 Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/books/{bookId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Book> showBookById(
        @Parameter(name = "bookId", description = "The book id", required = true, in = ParameterIn.PATH) @PathVariable("bookId") Integer bookId
    ) {
        return getDelegate().showBookById(bookId);
    }

}
