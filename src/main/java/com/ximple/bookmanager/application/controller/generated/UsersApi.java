/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.ximple.bookmanager.application.controller.generated;

import com.ximple.bookmanager.application.dto.generated.Error;
import com.ximple.bookmanager.application.dto.generated.UserAuth;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-24T17:58:21.952677-06:00[America/Mexico_City]")
@Validated
@Controller
@Tag(name = "users", description = "the users API")
public interface UsersApi {

    default UsersApiDelegate getDelegate() {
        return new UsersApiDelegate() {};
    }

    /**
     * POST /users : Endpoint to authenticate the user and retrieve JWT
     *
     * @param user  (required)
     * @param password  (required)
     * @return Authentication sucessfully (status code 200)
     *         or Authentication failed (status code 401)
     */
    @Operation(
        operationId = "authUser",
        summary = "Endpoint to authenticate the user and retrieve JWT",
        responses = {
            @ApiResponse(responseCode = "200", description = "Authentication sucessfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserAuth.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication failed", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/users",
        produces = { "application/json" },
        consumes = { "application/x-www-form-urlencoded" }
    )
    
    default ResponseEntity<UserAuth> authUser(
        @Parameter(name = "user", description = "", required = true) @Valid @RequestParam(value = "user", required = true) String user,
        @Parameter(name = "password", description = "", required = true) @Valid @RequestParam(value = "password", required = true) String password
    ) {
        return getDelegate().authUser(user, password);
    }

}
